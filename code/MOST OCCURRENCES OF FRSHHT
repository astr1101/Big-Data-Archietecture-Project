val frshht=data_2.filter(x=>x.length>2).map(x=>((x(0),x(27))))
val sep_frssht=frshht.filter{case(x,y)=>x(0).isDigit & y!="000000"}.map{case(x,y)=>(x,(y(0).asDigit,y(1).asDigit,y(2).asDigit,y(3).asDigit,y(4).asDigit,y(5).asDigit))}
val frshht_2=data_1.filter(x=>x.length>2).map(x=>((x(0),x(27))))
val sep_frssht_2=frshht_2.filter{case(x,y)=>x(0).isDigit & y!="000000"}.map{case(x,y)=>(x,(y(0).asDigit,y(1).asDigit,y(2).asDigit,y(3).asDigit,y(4).asDigit,y(5).asDigit))}

val unioned=sep_frssht.union(sep_frssht_2)
val reduced=unioned.reduceByKey{case((x1,x2,x3,x4,x5,x6),(x7,x8,x9,x10,x11,x12))=>(x1+x7, x2+x8, x3+x9, x4+x10, x5+x11, x6+x12)}

val fog=reduced.map{case(x,y)=>(x,y._1)}
val rain=reduced.map{case(x,y)=>(x,y._2)}
val snow=reduced.map{case(x,y)=>(x,y._3)}
val hail=reduced.map{case(x,y)=>(x,y._4)}
val thunder=reduced.map{case(x,y)=>(x,y._5)}
val tornado=reduced.map{case(x,y)=>(x,y._6)}

val stations_1=sc.textFile("bda_project_3/*.csv").map(x=>x.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)")).filter(x=>x.length>2).map(x=>(x(0),x(5)))
val stations_2=sc.textFile("bda_project_2/*.csv").map(x=>x.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)")).filter(x=>x.length>2).map(x=>(x(0),x(5)))
val stations_unioned=stations_1.union(stations_2)
val distinct_stations=stations_unioned.groupByKey().mapValues(x=>x.head).map{case(x,y)=>(x.replaceAll("\"", ""), y)}


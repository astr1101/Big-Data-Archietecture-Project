import breeze.linalg.NumericOps._


val grouped=unioned_data.map{case((x,y),z)=>(x,(y,z))}
val grouped_3=grouped.groupByKey().mapValues(x=>Array(x.unzip))
val re=grouped_3.filter{case(x,y)=>x=="40553099999"}
val re1=re.map{case(x,y)=>(x,DenseVector(y(0)._1.toArray), DenseVector(y(0)._2.toArray))}
val re2=re1.map{case(x,y,z)=>(x,y.size, sum(y), sum(z), sum(y.map(y=>y*y)),y.toArray.zip(z.toArray).map{case(x,y)=>(x*y)}.sum)}
val re3=re2.map{case(a,b,c,d,e,f)=>(a, (b*f-c*d)/(b*e-c*c))}


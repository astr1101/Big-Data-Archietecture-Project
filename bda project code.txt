val data_1=sc.textFile("bda_project_2/*.csv").map(x=>x.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)").map(_.replaceAll("\\s","").replaceAll("\"", "")))
val data_2=sc.textFile("bda_project_3/*.csv").map(x=>x.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)").map(_.replaceAll("\\s","").replaceAll("\"", "")))
val temps_1=data_1.filter(x=>x.length>2).map(x=>((x(0),x(1).split("-")(0)),x(6))).filter{case((x,y),z)=>z(0).isDigit}.map{case((x,y),z)=>((x,y.toInt),z.toFloat)}.groupByKey().mapValues(x=>x.sum/x.size)
val temps_2=data_2.filter(x=>x.length>2).map(x=>((x(0),x(1).split("-")(0)),x(6))).filter{case((x,y),z)=>z(0).isDigit}.map{case((x,y),z)=>((x,y.toInt),z.toFloat)}.groupByKey().mapValues(x=>x.sum/x.size)
val unioned_data=temps_1.union(temps_2)
val unioned_data_2=unioned_data.sortBy(pair => pair._2, false)
unioned_data_2.take(10)

Top 10 Highest Average Temperatures In a Year

((69188499999,1991),109.8)
((69237499999,1988),109.7)
((63125299999,1998),107.6)
((69237499999,1992),106.85)
((69188499999,1992),106.7)
((69246499999,1993),106.0)
((69116499999,1988),105.53333)
((69122499999,1993),105.5)
((41396099999,1995),105.3)
((69230499999,1992),104.86)

Combine it with station location
val unioned_data_2=unioned_data.map{case((x,y),z)=>(x,(y,z))}

val stations_1=data_1.filter(x=>x.length>2).map(x=>((x(0),x(5))))
val stations_2=data_2.filter(x=>x.length>2).map(x=>((x(0),x(5))))
val stations_3=stations_1.union(stations_2)
val stations_4=stations_3.distinct
val combined=unioned_data_2.join(stations_4)
val combined_2=combined.map{case(w,((x,y),z))=>(w,x,y,z)}.sortBy(pair=>pair._3, false)

combined_2.take(10).foreach(println)

(69188499999,1991,109.8,)
(69237499999,1988,109.7,AFWAASSIGNED)
(63125299999,1998,107.6,DJIBOUTIAMBOULI,DJ)
(69237499999,1992,106.85,AFWAASSIGNED)
(69188499999,1992,106.7,)
(69246499999,1993,106.0,AFWAASSIGNED)
(69116499999,1988,105.53333,REDSTONEARSENAL,ALUS)
(69122499999,1993,105.5,AFWAASSIGNED,CAUS)
(41396099999,1995,105.3,SEIYOUN,YM)
(69230499999,1992,104.86,AFWAASSIGNED)

COUNTING STATIONS BY COUNTRY

val station_count=stations_4.map{case(x,y)=>y.slice(y.length-2,y.length)}.map(x=>(x,1)).reduceByKey(_+_).sortBy(pairs=>pairs._2, false)
station_count.take(25).foreach(println)
(US,6784)
(RS,2062)
(CA,1866)
(,1459)
(CH,1105)
(AS,897)
(BR,800)
(UK,632)
(GM,466)
(SW,408)
(NO,375)
(JA,354)
(FR,309)
(KZ,298)
(IT,297)
(SF,269)
(IN,260)
(RO,253)
(FI,227)
(MX,213)
(UP,205)
(AY,199)
(AU,192)
(KS,190)
(PL,186)

val station_count=stations_4.map{case(x,y)=>y.slice(y.length-4,y.length)}.map(x=>(x.slice(0,2),1)).filter{case(x,y)=>x.length>1 & !(x.contains(","))}.reduceByKey(_+_).sortBy(pairs=>pairs._2, false)
station_count.take(50).foreach(println)
(AK,537)
(TX,485)
(CA,452)
(FL,267)
(MI,221)
(MN,205)
(NC,195)
(LA,191)
(CO,165)
(GA,156)
(VA,149)
(IL,145)
(WI,145)
(WA,141)
(NY,132)
(IA,125)
(NM,123)
(AL,120)
(AZ,119)
(SC,115)
(OK,113)
(OR,111)
(NE,107)
(OH,105)
(PA,104)
(MT,95)
(MO,95)
(ND,93)
(KS,90)
(WY,88)
(UT,86)
(MS,83)
(AR,82)
(MA,79)
(IN,78)
(ME,73)
(NV,68)
(MD,68)
(ID,65)
(NJ,61)
(KY,61)
(TN,59)
(HI,56)
(SD,55)
(GN,51)
(NH,38)
(CT,38)
(WV,37)
(RI,23)
(VT,22)

val grouped=unioned_data.map{case((x,y),z)=>(x,z)}.groupByKey().mapValues(x=>(x.max-x.min,x.size)).sortBy(pairs=>pairs._2._1,false).filter(x=>x._2._2>70)
grouped.collect.foreach(println)

(38750099999,(49.88333,73))                                                     
(31735099999,(47.744736,76))
(31510099999,(44.516663,74))
(35849099999,(42.212654,72))
(37472099999,(40.530136,73))
(34929099999,(37.931847,73))
(28275099999,(36.31629,72))
(29612099999,(34.68064,74))
(72365023050,(33.204712,75))
(74570013840,(32.69787,76))
(36177099999,(32.35059,74))
(28493099999,(32.0641,72))
(32540099999,(31.272242,71))
(36003099999,(30.873564,74))
(30758099999,(29.866005,73))
(24944099999,(29.618195,71))
(72464093058,(29.38136,74))
(04018016201,(28.613346,72))
(10637099999,(27.814442,74))
(72662524006,(27.436518,71))
(74491014703,(27.43253,71))
(35229099999,(27.41063,73))
(28698099999,(27.26104,73))
(35121099999,(27.189678,72))
(10633099999,(27.100006,74))
(29634099999,(26.77052,76))
(29838099999,(26.703396,71))
(38880099999,(26.279865,74))
(72785524114,(25.949636,72))
(47110099999,(25.907867,72))
(04231099999,(25.86435,75))
(28661099999,(25.72163,73))
(29698099999,(24.918808,73))
(70267026415,(24.675264,72))
(29263099999,(24.542425,73))
(70296026410,(24.475412,75))
(28722099999,(24.268448,73))
(25399099999,(24.17534,71))
(30230099999,(24.088753,72))
(23933099999,(23.736221,73))
(72528014733,(23.133038,73))
(28440099999,(22.664621,72))
(23631099999,(22.57502,73))
(72537714804,(22.452036,75))
(72433813802,(22.42678,74))
(72259513911,(22.246593,75))
(72381023114,(21.919762,71))
(23914099999,(21.651709,73))
(94910099999,(21.424164,75))
(29231099999,(20.745361,73))
(38836099999,(20.613945,73))
(70261026411,(20.488882,71))
(72785024157,(20.421385,71))
(72270023044,(20.214981,72))
(72286023119,(20.094948,79))
(72698024229,(19.892895,71))
(20292099999,(19.800001,72))
(72572024127,(19.774319,71))
(20674099999,(19.349297,72))
(72355013945,(19.31255,71))
(31960099999,(19.307878,73))
(72520094823,(18.982265,72))
(23032099999,(18.980505,71))
(72225013829,(18.976002,72))
(72363023047,(18.876434,73))
(94510099999,(18.793472,75))
(74790013849,(18.784725,71))
(70026027502,(18.593456,73))
(72404013721,(18.215809,71))
(70308025713,(18.173847,72))
(72306013722,(18.030388,72))
(72509014739,(17.991959,74))
(10866099999,(17.862804,76))
(26063099999,(17.857735,73))
(72405013743,(17.815872,79))
(94637099999,(17.579155,77))
(70271026425,(17.39026,72))
(72248513944,(17.228207,74))
(38457099999,(16.825836,73))
(38987099999,(16.269703,73))
(72253512909,(15.964588,75))
(74598013702,(15.92625,76))
(94926099999,(15.656185,77))
(72266013962,(15.6362,71))
(47808099999,(15.195587,71))
(72303013714,(15.13467,75))
(72253612911,(14.928947,73))
(72268023009,(14.88076,71))
(72226513821,(14.333,77))
(94374099999,(14.196144,77))
(72253012921,(13.368141,71))
(72251012924,(12.582645,71))
(26702099999,(12.540066,72))
(74206024207,(12.434498,71))
(70398025308,(12.344723,77))
(94776099999,(12.120361,71))
(72208013880,(12.06778,71))
(94865099999,(11.528236,71))
(94907099999,(11.376858,73))
(72231012916,(10.820946,72))
(94312099999,(10.819336,74))
(94212099999,(10.532814,73))
(70219026615,(10.3333,72))
(94968099999,(10.277473,71))
(94653099999,(10.087776,77))
(94403099999,(9.821281,75))
(70326025503,(9.792671,75))
(94300099999,(9.565674,72))
(94821099999,(9.202892,75))
(48456099999,(9.189323,74))
(72297023129,(9.158634,74))
(94203099999,(8.761063,77))
(70350025501,(8.677631,72))
(72290693112,(8.543957,72))
(70454025704,(7.934166,71))
(78367011706,(5.4671936,72))
(48354099999,(4.5416718,74))
(94120099999,(4.3137054,75))
(91182022521,(4.2517853,78))


Biggest Fluctuation in One Day

val id_max_min_date=data_1.filter(x=>x.length>2).map(x=>((x(0),x(1),x(20),x(22)))).filter{case(a,b,c,d)=>a(0).isDigit}.filter{case(a,b,c,d)=> c!="9999.9"}.filter{case(a,b,c,d)=>d!="9999.9"}.map{case(a,b,c,d)=>(a,(b,c.toDouble-d.toDouble))}

val id_max_min_date_2=data_2.filter(x=>x.length>2).map(x=>((x(0),x(1),x(20),x(22)))).filter{case(a,b,c,d)=>a(0).isDigit}.filter{case(a,b,c,d)=> c!="9999.9"}.filter{case(a,b,c,d)=>d!="9999.9"}.map{case(a,b,c,d)=>(a,(b,c.toDouble-d.toDouble))}

val grouped_diff=id_max_min_date.union(id_max_min_date_2)

val grouped_diff_2=grouped_diff.sortBy(x=>x._2._2, false)



grouped_diff_2.take(10).foreach(println)
(30127099999,(1969-03-09,60.0))                                                 
(74596513756,(1988-07-17,59.8))
(29313099999,(1989-12-30,59.8))
(71967099999,(1986-03-25,59.8))
(72222100444,(2018-07-28,59.8))
(72222100444,(2018-07-30,59.8))
(72222100444,(2018-08-07,59.8))
(72222100444,(2018-07-28,59.8))
(72222100444,(2018-07-30,59.8))
(72222100444,(2018-08-07,59.8))


val grouped_diff_3=grouped_diff.sortBy(x=>x._2._2)
grouped_diff_3.take(10).foreach(println)

(87097099999,(1986-10-20,0.09999999999999432))
(48917099999,(1989-07-01,0.09999999999999432))
(03282099999,(1995-12-18,0.09999999999999432))
(15025099999,(1995-09-03,0.09999999999999432))
(15254099999,(1995-01-26,0.09999999999999432))
(94207099999,(1991-10-28,0.09999999999999432))
(94289099999,(1991-12-29,0.09999999999999432))
(94379099999,(1991-10-11,0.09999999999999432))
(99220099999,(1995-09-09,0.09999999999999432))
(41262099999,(1992-04-04,0.09999999999999432))


###WHICH PLACES HAVE HAD THE MOST OCCURRENCES OF FRSHHT

val frshht=data_2.filter(x=>x.length>2).map(x=>((x(0),x(27))))
val sep_frssht=frshht.filter{case(x,y)=>x(0).isDigit & y!="000000"}.map{case(x,y)=>(x,(y(0).asDigit,y(1).asDigit,y(2).asDigit,y(3).asDigit,y(4).asDigit,y(5).asDigit))}
val frshht_2=data_1.filter(x=>x.length>2).map(x=>((x(0),x(27))))
val sep_frssht_2=frshht_2.filter{case(x,y)=>x(0).isDigit & y!="000000"}.map{case(x,y)=>(x,(y(0).asDigit,y(1).asDigit,y(2).asDigit,y(3).asDigit,y(4).asDigit,y(5).asDigit))}

val unioned=sep_frssht.union(sep_frssht_2)
val reduced=unioned.reduceByKey{case((x1,x2,x3,x4,x5,x6),(x7,x8,x9,x10,x11,x12))=>(x1+x7, x2+x8, x3+x9, x4+x10, x5+x11, x6+x12)}

val fog=reduced.map{case(x,y)=>(x,y._1)}.sortBy(pairs=>pairs._2, false)

res67: Array[(String, Int)] = Array((98328099999,17827), (12510099999,16298), (15280099999,15299), (58931099999,15294), (70026027502,14021), (56385099999,13214), (70308025713,13129), (10637099999,12783), (15615099999,12642), (58437099999,12374))

val rain=reduced.map{case(x,y)=>(x,y._2)}.sortBy(pairs=>pairs._2, false)

res68: Array[(String, Int)] = Array((70398025308,18610), (82193099999,17549), (03005099999,17078), (04018016201,16929), (03026099999,16772), (03135099999,16641), (08509099999,16464), (70296026410,16068), (03980099999,15940), (03953099999,15897))

val snow=reduced.map{case(x,y)=>(x,y._3)}.sortBy(pairs=>pairs._2, false)
Array[(String, Int)] = Array((70026027502,14883), (31004099999,12253), (20292099999,12107), (20069099999,11903), (20674099999,11827), (23022099999,11405), (30393099999,11311), (23472099999,11302), (71924099999,11248), (21824099999,10903))


val hail=reduced.map{case(x,y)=>(x,y._4)}.sortBy(pairs=>pairs._2, false)
hail: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[363] at sortBy at <console>:43

res70: Array[(String, Int)] = Array((03005099999,3000), (01010099999,1991), (03008099999,1985), (01152099999,1944), (03017099999,1913), (03980099999,1668), (01241099999,1650), (03976099999,1638), (03026099999,1635), (82930099999,1526))

val thunder=reduced.map{case(x,y)=>(x,y._5)}.sortBy(pairs=>pairs._2, false)

thunder.take(10)
res71: Array[(String, Int)] = Array((48647099999,10190), (48601099999,9773), (82193099999,9643), (64910099999,8563), (96413099999,8467), (48620099999,8211), (48665099999,7864), (63708099999,7641), (48657099999,6877), (48900099999,6656))

val tornado=reduced.map{case(x,y)=>(x,y._6)}.sortBy(pairs=>pairs._2, false)
tornado: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[375] at sortBy at <console>:43

scala> tornado.take(10)
res72: Array[(String, Int)] = Array((72201012836,467), (72201512850,251), (78535011630,244), (78062099999,233), (47704099999,231), (78384011813,183), (47930099999,182), (78858099999,160), (78073099999,147), (91212041415,111))
